* Level 0: Prelude

** Getting & Compiling Scopes

This section will change as this landscape changes.

The latest "releases" and tags of Scopes are very out of date and
should not be used (i.e. [[https://hg.sr.ht/~duangle/scopes-binaries][this page]]).

At this time it is recommended to use the tip of the main branch in
the Mercurial repository and to keep up to date with it as new,
important features are added.

*** From Package Managers

Here we list instructions for the different package managers which
support installing Scopes.

**** Spack

[[https://spack.io/][Spack]] is a python based package manager that can easily be installed
and used with user priveleges on any Linux or Mac machine (Windows
support is new and untested for Scopes).

The [[https://github.com/salotz/snailpacks][snailpacks]] repository provides a recipe for compiling and
installing Scopes and all of its dependencies. Please see the section
in its [[https://github.com/salotz/snailpacks#scopes-programming][documentation]] for more information.

*** Standalone Installation

If you don't want to use one of the available package managers you can
compile Scopes manually. This method uses the prebuilt binaries of
LLVM.

**** Ubuntu Linux

You must have Mercurial, Git, and [[https://github.com/bkaradzic/GENie][Genie]] installed.

#+begin_src sh
  program_name="scopes"

  # you must have this exact version of Clang
  clang_version="12.0.1"

  build_cores=$(($(grep -c ^processor /proc/cpuinfo)-1))

  # NOTE: you can choose where you want to install
  PROGRAMS_DIR=~/programs

  cd $PROGRAMS_DIR
  mkdir -p ${program_name}
  cd ${program_name}

  rm -rf latest

  hg_url="https://hg.sr.ht/~duangle/scopes"
  hg clone $hg_url latest || exit

  cd latest

  # NOTE: there are no prebuilts for Ubuntu 20, that is fine just use the 16 one
  clang_filename="clang+llvm-${clang_version}-x86_64-linux-gnu-ubuntu-16.04"

  clang_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-${clang_version}/${clang_filename}.tar.xz"

  wget $clang_url || exit

  tar -xvf ${clang_filename}.tar.xz

  rm -f ${clang_filename}.tar.xz
  mv ${clang_filename} clang

  # clone the SPIRV related dependencies
  git clone https://github.com/KhronosGroup/SPIRV-Tools.git \
      SPIRV-Tools

  git clone https://github.com/KhronosGroup/SPIRV-Headers.git \
      SPIRV-Tools/external/spirv-headers

  git clone https://github.com/KhronosGroup/SPIRV-Cross

  # compile SPIRV-Tools
  cd SPIRV-Tools

  rm -rf build && \
      mkdir -p build && \
      cd build && \
      cmake .. -DCMAKE_BUILD_TYPE=Release && \
      make -j "${build_cores}"

  cd ../../

  # generate the project files for Scopes
  genie gmake

  # compile Scopes itself
  make -C build config=release -j "${build_cores}"

  # Install the Clang header files which are needed for the bridge to C
  # code
  clang_bridge="$(llvm-config --prefix)/lib/clang/$(llvm-config --version)/include"

  mkdir -p lib/clang
  ln -sf -T ${clang_bridge} ./lib/clang/include

  # Install the Scopes binary
  ln -sf -T $(realpath ./bin/scopes) $HOME/.local/bin/scopes-latest
  ln -sf -T $HOME/.local/bin/scopes-latest $HOME/.local/bin/scopes

#+end_src

*** Keeping Up To Date

We recommend checking the [[https://hg.sr.ht/~duangle/scopes/log][commit log]] to see what new changes have been
made.

If there are only changes to Scopes code (typically ~core.sc~ and the
standard libraries) then you only need to update the repo and no
recompilation is necessary:

#+begin_src sh
  cd $SCOPES_DIR && hg pull --update
#+end_src

If there have been changes to any of the C++ files you will need to
recompile after updating your repo.

** Source Code

Scopes programs are text files ending with the file extension ~.sc~.

The "format" of these files is independent of the language and is
called "Scopes List Notation" (SLN). Its equivalent to writing a
programming language in XML, JSON or YAML syntax.

In this format words are separated by either whitespace, parentheses
~()~ (or brackets too if you want ~[]{}~), and
newlines-followed-by-indentation (i.e. python style).

Some examples of SLN that are *NOT* Scopes code but are all equivalent:

#+begin_src scopes
  person
      first_name Bob
      last_name Bobson
#+end_src

#+begin_src scopes
  person (first_name Bob) (last_name Bobson)
#+end_src

The full description is in the documentation. Don't get too caught up
in the details. If you get stuck with the indentation method just
throw parentheses around everything and work your way back.

Comments are lines and indentation blocks starting with a ~#~. Symbols
are not part of the parse tree.

The ~;~ and ~,~ characters are also reserved by the SLN syntax, but
this author doesn't think they are necessary to understand and write
the code. They are more used to get around a few gnarly parts of the
space and parens syntax or just to make a few things nicer.

The ~;~ is the "list separator" and is similar to the "statement
separator" of imperative languages like C/C++. In Python this would
just be the "newline" of having commands run in order, for which the
~;~ character can also be used to put them on a single line.

The ~,~ character is a list separator which can be used without
whitespace (or with too..) (see Lists section)

There are 5 types of elements in SLN which will be discussed more in
the primitives section.

- Numbers
- Strings
- Symbols
- Lists
- Comments

** Running Programs

If you have a file you can run it on the command line like:

#+begin_src sh
scopes file.sc
#+end_src

You can also use the interpreter (typically called a REPL):

#+begin_src sh
scopes
#+end_src

On the REPL the help command can tell you the signature of functions,
where you can see for yourself:

#+begin_src scopes
  help print
#+end_src

You can also run shell commands with the ~sh~ command:

#+begin_src scopes
  sh ls
#+end_src


You can also execute code strings directly:

#+begin_src sh
  scopes -c 'print "hello"'
#+end_src

*** Bonus: Emacs Org Mode Users

The scopes interpreter is limited in that it has trouble with
multiline snippets, and scopes uses a lot of newlines. This can become
a nuisance.

If you use Emacs Org-Mode for writing code snippets you can use the
[[https://github.com/salotz/ob-scopes][ob-scopes]] module to execute code directly in an org mode notebook
(in fact this document is such a thing). For example it would look
like this:

#+begin_example
  ,#+begin_src scopes
     print "hello"
  ,#+end_src
#+end_example

Then you can evaluate it by placing your cursor in the block and
running the keybinding ~C-c C-c~.

** Some Things to Keep in Mind

*** Keywords & Symbols

In scopes there are no proper "keywords" like in most languages in the
sense that there is a compiler or interpreter that is hardcoded to
understand certain words as special. In this document we may say
"keyword" to not overcomplicate things, but just keep that in mind for
when approaching the more advanced features.

*** Style Choices

I don't pay attention too much to style here except that it should
look decent and be easy to copy-paste into REPL in one line if
possible.
