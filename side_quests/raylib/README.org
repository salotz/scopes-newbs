
** Install Dependencies

We use [[https://spack.io/][Spack]] to install dependencies. So install Spack.

Then you'll need our custom repo of build recipes:

#+begin_src sh
  mkdir -p ~/resources/spack-repos
  git clone git@github.com:salotz/snailpacks.git ~/resources/spack-repos/snailpacks
  spack repo add ~/resources/spack-repos/snailpacks
#+end_src

Then you need to create an environment in this folder that will
contain the headers and libraries etc.

#+begin_src sh
  spack env create -d .
#+end_src

Activate the environment (i.e. set the environment variables
appropriately) and install the packages:

#+begin_src sh
  spacktivate .
  spack install
#+end_src

Note that the first time running this could take quite a while since
Spack actually compiles *all* of the dependencies from scratch and
doesn't use your system packages at all.


Once this is done the examples should just work. The ~pkg.sc~ file is
a kind of locale specific file that gives the paths to the include and
library directories which can be loaded from scopes. The one
distributed here uses the default path for spack envs in a folder
~./.spack-env/view~.

You can add other dependencies by either using the spack command line
tools or editing the ~spack.yaml~ file.

The ~spack.lock~ file has the full listing of concrete
dependencies. For developing on the same machine you can keep this
around to be 100% reproducible.

To rebuild the ~spack.lock~ file run and update dependencies:

#+begin_src sh
  spack concretize --force
#+end_src

To exit the environment (i.e. unset the env variables):

#+begin_src sh
  despacktivate
#+end_src

** Running

Then you can run the examples:

#+begin_src sh
  scopes ./src/01_core_basic_window.sc
#+end_src
