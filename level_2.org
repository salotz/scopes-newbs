** Level 2: Things you would know if you knew C/C++

*** Type Annotations

The return values of functions can be explicitly typed, and will be
type-checked:

#+begin_src scopes :tangle _bin/functions_returns.sc
  fn get-origin ()
      returning (_: i32 i32)

      _ 0 0

  let a b  = (get-origin)

#+end_src

#+RESULTS:

The ~returning~ statement can occur anywhere in the function
block. Types will not be cast and the annotation will be strictly
checked.

*** TODO Operator Overload
*** TODO More Strings

*** TODO Arrays


*** Including C Functions

You can load a single function:

#+begin_src scopes :tangle _bin/externc1.sc
  let printf =
      do
          let header = (include "stdio.h")
          header.extern.printf

  printf "hello\n"
#+end_src


Or a whole module:

#+begin_src scopes :tangle _bin/externc2.sc
  let c:stdio =
      (include "stdio.h") . extern

  c:stdio.printf "hello\n"
#+end_src

Note that ~c:stdio~ is just a symbol and not special syntax. It could
have been: ~stdio~ or any other valid symbol.


If you have a newer version it is also included in the standard
library:

#+begin_src scopes :tangle _bin/externc2.sc
  let c:stdio = (import C.stdio)
  let c:string = (import C.string)
  let c:stdlib = (import C.stdlib)
#+end_src



** Level 3: For Lisp/Scheme Gurus

In this section we will cover the features that are similar to Lisp
and Scheme like languages.

Scopes is after all a Scheme-like language.

*** TODO Pattern Matching

See ~match~


*** TODO

From the ~meta.md~ file in the unpublished docs.

- [ ] macros
- [ ] pattern matching
- [ ] debugging
- [ ] infix macros
- [ ] symbol prefix macros
- [ ] list hooks
- [ ] symbol hooks
- [ ] using macro libraries
- [ ] quotes
- [ ] meta-evaluation
- [ ] conditional translation

** Level 4: Going super-saiyan, Scopes trick-shots


*** Code Transformation

(From the unpublished docs)

| Order | Stage       | From                    | To                 | Macro System |
|-------+-------------+-------------------------+--------------------+--------------|
|     1 | Parsing     | Data Interchange Format | S-Expression Tree  |              |
|     2 | Expansion   | S-Expression Tree       | Untyped Scopes AST | Sugar        |
|     3 | Checking    | Untyped Scopes AST      | Typed Scopes IL    | Spice        |
|     4 | Translation | Typed Scopes IL         | LLVM IR / SPIR-V   |              |
|     5 | Execution   | LLVM IR / SPIR-V        | Program Output     |              |


** Level 5: ...
